#!/bin/bash

# ROP Vulnerability Lab - Linux Compilation Script
# Compiles the vulnerable program with appropriate flags for ROP exploitation

echo "=== ROP Vulnerability Lab - Linux Compilation ==="

# Create compiled directory if it doesn't exist
mkdir -p compiled

# Detect OS and set appropriate flags
if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    echo "[+] Detected Linux, using Linux-specific flags"
    COMPILE_FLAGS="-m64 -fno-stack-protector -z execstack -no-pie -Wno-unused-result -Wno-stringop-overflow"
elif [[ "$OSTYPE" == "darwin"* ]]; then
    echo "[+] Detected macOS, using macOS-specific flags"
    COMPILE_FLAGS="-m64 -fno-stack-protector -no-pie -Wno-unused-result -Wno-shift-overflow"
else
    echo "[+] Using generic flags"
    COMPILE_FLAGS="-m64 -fno-stack-protector -no-pie -Wno-unused-result"
fi

# Compilation flags for ROP lab
# -m64: 64-bit compilation
# -fno-stack-protector: Disable stack canary
# -z execstack: Make stack executable (Linux only)
# -no-pie: Disable Position Independent Executable
# -Wno-unused-result: Suppress unused result warnings
# -Wno-stringop-overflow: Suppress stringop overflow warnings

echo "[+] Compiling vulnerable program..."

g++ $COMPILE_FLAGS -o compiled/vulnerable_code source_code/vulnerable_code.cpp

if [ $? -eq 0 ]; then
    echo "[+] Compilation successful!"
    echo "[+] Binary created: compiled/vulnerable_code"
    
    # Make binary executable
    chmod +x compiled/vulnerable_code
    
    # Show binary info
    echo ""
    echo "Binary Information:"
    file compiled/vulnerable_code
    ls -la compiled/vulnerable_code
    
    echo ""
    echo "Security Features:"
    echo "- NX bit: $(readelf -l compiled/vulnerable_code | grep -q "GNU_STACK.*RWE" && echo "Disabled (Stack executable)" || echo "Enabled (Stack non-executable)")"
    echo "- ASLR: $(cat /proc/sys/kernel/randomize_va_space 2>/dev/null || echo "Unknown")"
    echo "- Stack Canary: Disabled"
    echo "- PIE: Disabled"
    
    echo ""
    echo "ROP Lab Ready!"
    echo "Run: ./test_lab.sh"
    echo "Or manually: ./compiled/vulnerable_code"
    
else
    echo "[-] Compilation failed!"
    exit 1
fi
