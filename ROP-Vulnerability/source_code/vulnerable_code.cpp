#include <iostream>
#include <cstring>
#include <unistd.h>

// Hedef fonksiyon - ROP chain ile çağrılacak
void win_function() {
    std::cout << "\nROP Exploit Basarili!" << std::endl;
    std::cout << "Program akisi basariyla ele gecirildi!" << std::endl;
    std::cout << "Bu bir ROP (Return-Oriented Programming) exploit'idir." << std::endl;
    std::cout << "Modern koruma mekanizmalarini (NX, ASLR) asma teknigi." << std::endl;
    exit(0);
}

// Shellcode enjeksiyonu için fonksiyon
void execute_whoami() {
    std::cout << "\nShellcode Enjeksiyonu Basarili!" << std::endl;
    std::cout << "'whoami' komutu calistiriliyor..." << std::endl;
    
    // whoami komutunu çalıştır
    int result = system("whoami");
    
    if (result == 0) {
        std::cout << "Komut basariyla calistirildi!" << std::endl;
    } else {
        std::cout << "Komut calistirilamadi!" << std::endl;
    }
    
    std::cout << "\nROP ile sistem komutu basariyla enjekte edildi!" << std::endl;
    exit(0);
}

// Gadget fonksiyonları - ROP chain için kullanılacak
// Bu fonksiyonlar ROP gadget'ları olarak kullanılacak
void gadget_pop_rdi() {
    // Bu fonksiyon ROP gadget olarak kullanılır
    // Gerçek gadget'lar objdump ile bulunur
    volatile int dummy = 0;
    dummy++; // Dummy instruction
}

void gadget_pop_rsi() {
    // Bu fonksiyon ROP gadget olarak kullanılır
    volatile int dummy = 0;
    dummy++;
}

void gadget_pop_rdx() {
    // Bu fonksiyon ROP gadget olarak kullanılır
    volatile int dummy = 0;
    dummy++;
}

void gadget_syscall() {
    // Bu fonksiyon ROP gadget olarak kullanılır
    volatile int dummy = 0;
    dummy++;
}

// Linux x86_64 için gerçek ROP gadget'ları
#ifdef __linux__
void real_gadget_pop_rdi() {
    asm volatile("pop %rdi; ret");
}

void real_gadget_pop_rsi() {
    asm volatile("pop %rsi; ret");
}

void real_gadget_pop_rdx() {
    asm volatile("pop %rdx; ret");
}

void real_gadget_syscall() {
    asm volatile("syscall; ret");
}
#endif

// Zafiyetli fonksiyon - Buffer overflow'a neden olur
void vulnerable_function() {
    char buffer[64];
    
    std::cout << "ROP Vulnerability Lab - Buffer Overflow" << std::endl;
    std::cout << "========================================" << std::endl;
    
    std::cout << "\nGiris yapin: ";
    
    // Zafiyet: read() ile 256 byte okuyor ama buffer sadece 64 byte
    // Bu, stack overflow'a neden olur ve return address'i overwrite edebilir
    read(0, buffer, 256);
    
    std::cout << "Buffer icerigi: " << buffer << std::endl;
}

int main() {
    std::cout << "=== CyberLabs ROP Vulnerability Laboratory ===" << std::endl;
    std::cout << "Modul: Return-Oriented Programming Exploitation" << std::endl;
    std::cout << "Seviye: Ileri" << std::endl;
    
    vulnerable_function();
    
    std::cout << "Program normal sekilde sonlandi." << std::endl;
    return 0;
}
